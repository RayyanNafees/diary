/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WriteasPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/Writeas.ts
var import_obsidian = require("obsidian");
var WriteasClient = class {
  constructor(user, pass) {
    this.user = user;
    this.pass = pass;
  }
  login() {
    return (0, import_obsidian.requestUrl)({
      url: "https://write.as/api/auth/login",
      body: JSON.stringify({ alias: this.user, pass: this.pass }),
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      }
    }).catch((err) => {
      console.error(err);
      return;
    }).then((resp) => {
      let res = resp == null ? void 0 : resp.json["data"];
      this.token = res["access_token"];
    });
  }
  getCollections() {
    return (0, import_obsidian.requestUrl)({
      url: "https://write.as/api/me/collections",
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Token ${this.token}`
      }
    }).catch((err) => {
      console.error(err);
      return;
    }).then((resp) => {
      let res = resp == null ? void 0 : resp.json["data"];
      return res;
    });
  }
  getPost(post_id) {
    return (0, import_obsidian.requestUrl)({
      url: `https://write.as/api/posts/${post_id}`,
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Token ${this.token}`
      }
    }).catch((err) => {
      console.error(err);
      return;
    }).then((resp) => {
      let res = resp == null ? void 0 : resp.json["data"];
      return res;
    });
  }
  moveToCollection(collection, post_id) {
    return (0, import_obsidian.requestUrl)({
      url: `https://write.as/api/collections/${collection}/collect`,
      body: JSON.stringify([{ id: post_id }]),
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Token ${this.token}`
      }
    }).catch((err) => {
      console.error(err);
      return;
    }).then((resp) => {
      let res = resp == null ? void 0 : resp.json["data"];
      return res;
    });
  }
  publishPost(body, collection) {
    return (0, import_obsidian.requestUrl)({
      url: `https://write.as/api/collections/${collection}/posts`,
      body: JSON.stringify(body),
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Token ${this.token}`
      }
    }).catch((err) => {
      console.error(err);
      return;
    }).then((resp) => {
      let res = resp == null ? void 0 : resp.json["data"];
      return res;
    });
  }
  updatePost(body, post_id) {
    return (0, import_obsidian.requestUrl)({
      url: `https://write.as/api/posts/${post_id}`,
      body: JSON.stringify(body),
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Token ${this.token}`
      }
    }).catch((err) => {
      console.error(err);
      return;
    }).then((resp) => {
      let res = resp == null ? void 0 : resp.json["data"];
      return res;
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  writeasUser: "default",
  writeasPassword: "default"
};
var COLL_KEY = "writeas_collection";
function removeFrontMatter(content) {
  const YAMLFrontMatter = /\---(.|\n)*?---/i;
  return content.replace(YAMLFrontMatter, "");
}
var WriteasPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "open-publish-simple",
      name: "Publish/update",
      hotkeys: [],
      callback: () => {
        var file = this.app.workspace.getActiveFile();
        if (file) {
          this.handleFile(file);
        }
      }
    });
    this.addSettingTab(new SettingTab(this.app, this));
  }
  async handleFile(file) {
    let c = new WriteasClient(this.settings.writeasUser, this.settings.writeasPassword);
    this.app.vault.cachedRead(file).then(async (lines) => {
      var content = this.app.metadataCache.getFileCache(file);
      if ((content == null ? void 0 : content.frontmatter) && content.frontmatter[COLL_KEY]) {
        let coll = content.frontmatter[COLL_KEY];
        await c.login();
        let post_body = { body: removeFrontMatter(lines), title: file.basename };
        let res;
        if (content.frontmatter["_writeas_id"]) {
          let id = content.frontmatter["_writeas_id"];
          res = await c.updatePost(post_body, id);
          if (res === void 0) {
            new import_obsidian2.Notice("Failed to update post. Does it exist?");
            return;
          }
          c.getPost(id);
        } else {
          res = await c.publishPost(post_body, content.frontmatter[COLL_KEY]);
          if (res === void 0) {
            new import_obsidian2.Notice("Failed to publish, does the collection exist?");
            return;
          }
          app.fileManager.processFrontMatter(file, (frontmatter) => {
            frontmatter["writeas_url"] = res["url"];
            frontmatter["_writeas_id"] = res["id"];
          });
        }
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Writeas User").setDesc("").addText((text) => text.setPlaceholder("Enter your writeas username").setValue(this.plugin.settings.writeasUser).onChange(async (value) => {
      this.plugin.settings.writeasUser = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Writeas Password").setDesc("").addText((text) => text.setPlaceholder("Enter your writeas password").setValue(this.plugin.settings.writeasPassword).onChange(async (value) => {
      this.plugin.settings.writeasPassword = value;
      await this.plugin.saveSettings();
    }));
  }
};
